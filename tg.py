from worker import Worker
import re
import telebot
import time

bot = telebot.TeleBot('7014412419:AAFiQ0toKgiXt4zqPlGvWpR4ojwJLfjrPgQ')
proxy_id = "71790"
worker = Worker('webdriver/chromedriver.exe', 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe')


@bot.message_handler(commands=['start'])
def start_message(message):

    bot.send_message(message.chat.id, '''üëã *–ü—Ä–∏–≤–µ—Ç*
üíé –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–∞–∂–µ —Ç–∞–∫—É—é —Ä–∞–±–æ—Ç—É –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å üó£
üì≤ –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–æ –≤–∞—Å, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Ä–∞–±–æ—Ç—É —Å —Ñ–µ–π—Å–±—É–∫–æ–º ‚úè
                     ''', parse_mode="MarkdownV2")


@bot.message_handler(commands=['myid'])
def send_id(message):
    """
    Handle the 'myid' command and send the user's ID back to them.
    """
    bot.send_message(message.from_user.id, f'{message.from_user.id}')


@bot.message_handler(commands=['proxy'])
def send_proxy(message):
    """
    Handles the 'proxy' command and sends the current proxy ID to the user.
    
    Args:
        message: The message object
    """
    global proxy_id
    bot.send_message(message.from_user.id, f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–π–¥–∏ –ø—Ä–æ–∫—Å–∏: {proxy_id}. –•–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å? –ù–∞–∂–º–∏—Ç–µ /changeproxy')
    
    
@bot.message_handler(commands=['changeproxy'])
def change_proxy(message):
    """
    Handles the 'changeproxy' command by sending a message to the user to input a proxy ID.
    
    Parameters:
    - message: the message object
    """
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∞–π–¥–∏ –ø—Ä–æ–∫—Å–∏:')
    
    
@bot.message_handler(commands=['setcookie'])
def set_cookie(message):
    """
    Handle the 'setcookie' command by sending a message to the user, setting a cookie using the global worker, 
    and sending another message to the user.
    """
    global worker
    bot.send_message(message.from_user.id, '–ü—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –æ–∂–∏–¥–∞–∏ÃÜ—Ç–µ...\n–ù–∞–ø–æ–º–∏–Ω–∞—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!!!')
    worker.set_cookie()
    bot.send_message(message.from_user.id, '–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
    
    
@bot.message_handler(commands=['take'])
def take_accs(message):
    """
    A function to handle the 'take' command for the bot. It sends a message to the user requesting data in a specific format.
    """
    bot.send_message(message.from_user.id, '''–î–∞–≤–∞–π —Å–æ–±–µ—Ä–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
–ß—Ç–æ–±—ã —è –Ω–∞—á–∞–ª –ø—Ä–∏—à–ª–∏ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ - *–ù–æ–º–µ—Ä–°—Ç—Ä–∞–Ω–∏—Ü—ã –ö–æ–ª-–≤–æ–ü–∞—á–µ–∫ –ö–æ–ª-–≤–æ–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –ù–æ–º–µ—Ä–ì—Ä—É–ø–ø—ã*
–ü—Ä–∏–º–µ—Ä - *97 1 1 1*''', parse_mode="Markdown")
    
    
@bot.message_handler(commands=['check'])
def check_accs(message):
    """
    A function to handle the 'check' command for the bot's message handler.
    It sends a message to the user with instructions on how to send data in a specific format. 
    """
    bot.send_message(message.from_user.id, '''–ß–µ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–ß—Ç–æ–±—ã —è –Ω–∞—á–∞–ª –ø—Ä–∏—à–ª–∏ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ - *Label–ì—Ä—É–ø–ø—ã–ù–∞—á–∞–ª–æ,Label–ì—Ä—É–ø–ø—ã–ö–æ–Ω–µ—Ü*
–ü—Ä–∏–º–µ—Ä - *01.01 100.1,02.01.30*''', parse_mode="Markdown")


@bot.message_handler(commands=['pages'])
def create_pages(message):
    """
    A function to handle the 'pages' command and create pages based on the provided data format.
    
    Parameters:
    - message: the message object containing the command
    """
    bot.send_message(message.from_user.id, '''–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–Ω–ø–µ–π–¥–∂–µ–π
–ß—Ç–æ–±—ã —è –Ω–∞—á–∞–ª –ø—Ä–∏—à–ª–∏ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ - *pgLabel–ì—Ä—É–ø–ø—ã–ù–∞—á–∞–ª–æ,Label–ì—Ä—É–ø–ø—ã–ö–æ–Ω–µ—Ü*
–ü—Ä–∏–º–µ—Ä - *pg01.01 100.1,02.01.30*''', parse_mode="Markdown")
    

@bot.message_handler(content_types=['text'])
def get_user_text(message):
    """
    A function to handle text messages from the bot and perform various actions based on the text content.
    """
    global proxy_id, worker
    PATTERN_TAKE = r"\d \d$"
    PATTERN_CHECK = r"\d,\d"
    PATTERN_CREATE = r"^pg"
    
    if len(message.text) == 5 and message.text.isdigit():
        proxy_id = message.text
        bot.send_message(message.from_user.id, f'–ù–æ–≤—ã–π –∞–π–¥–∏ –ø—Ä–æ–∫—Å–∏: {proxy_id}')
        
    if re.search(PATTERN_TAKE, message.text):
        bot.send_message(message.from_user.id, '–Ø –Ω–∞—á–∞–ª —Å–æ–±–∏—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
        
        take_list = message.text.split(' ')
        worker.take_accs(url_page=take_list[0], packs_quantity=int(take_list[1]), 
                        accs_quantity=int(take_list[2]), group_num=int(take_list[3]), proxy_id=proxy_id)
        
        bot.send_message(message.from_user.id, '*–ê–∫–∫–∞—É–Ω—Ç—ã —Å–æ–±—Ä–∞–Ω—ã!*', parse_mode="Markdown")

    if re.search(PATTERN_CHECK, message.text) and not re.search(PATTERN_CREATE, message.text.lower()):
        bot.send_message(message.from_user.id, '–Ø –Ω–∞—á–∞–ª —á–µ–∫–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
        
        check_list = message.text.split(',')
        worker.check_accs(start=check_list[0], end=check_list[1])
        
        bot.send_message(message.from_user.id, '*–ê–∫–∫–∞—É–Ω—Ç—ã —á–µ–∫–Ω—É—Ç—ã!*', parse_mode="Markdown")
    
    if re.search(PATTERN_CHECK, message.text) and re.search(PATTERN_CREATE, message.text.lower()):
        bot.send_message(message.from_user.id, '–Ø –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–Ω–ø–µ–π–¥–∂–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
        
        page_list = message.text[2:].split(',')
        errors = worker.create_pages(start=page_list[0], end=page_list[1])
        
        bot.send_message(message.from_user.id, '*–§–∞–Ω–ø–µ–π–¥–∂–∏ —Å–æ–∑–¥–∞–Ω—ã!*', parse_mode="Markdown")
        bot.send_message(message.from_user.id, errors, parse_mode="Markdown")


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print('–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞')
            with open('log_tg.txt', 'a', encoding="utf-8") as file:
                file.write(f'\n{str(e)}')
            time.sleep(25)